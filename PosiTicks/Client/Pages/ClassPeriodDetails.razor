@page "/classperiod/{id:int}"
@using Serilog
@inject HttpClient Http
@inject IJSRuntime JSRuntime;

@if (loadFailed)
{
    <p><em>Sorry, the class period could not be loaded due to an error</em></p>
}
else if (vm == null)
{
    <p><em>Loading...</em></p>
}
else if (updateFailedUnexpectedly)
{
    <p><em>Sorry, the class period could not be updated due to an error</em></p>
}
else
{
    <section class="jumbotron text-center">
        <div class="container">
            <h1>@vm.Name</h1>
            @if (!addingStudent)
            {
                <p>
                    <button type="button" class="btn btn-primary my-2">Add Tickets</button>
                    <button type="button" class="btn btn-secondary my-2" @onclick="AddStudentButtonClicked">Add Student</button>
                </p>
            }
            else
            {
                <EditForm Model="@student" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <CustomValidator @ref="customValidator" />
                    <ValidationSummary />

                    <InputText id="addStudentName" @bind-Value="student.Name" />
                    <button type="submit" class="btn btn-primary">Add Another</button>
                    <button type="button" class="btn btn-secondary" @onclick="FinishButtonClicked">Finish</button>
                </EditForm>
            }
        </div>
    </section>
    <div class="container">
        <div class="row">
            @foreach (var student in vm.Students)
            {
                <StudentDetails Student="student"/>
            }
        </div>
    </div>
}

@code {
    private bool loadFailed;
    private bool updateFailedUnexpectedly;
    private PosiTicks.Shared.ClassPeriod vm;
    private CustomValidator customValidator;

    private bool addingStudent;
    private PosiTicks.Shared.Student student;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Log.ForContext<ClassPeriodDetails>().Information("Client: Loading class period {Id} at {RequestTime}", Id,
            DateTime.UtcNow);

        try
        {
            loadFailed = false;
            vm = await Http.GetFromJsonAsync<PosiTicks.Shared.ClassPeriod>($"ClassPeriod/{Id}");
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Log.ForContext<Index>().Warning(ex, "Client: Failed to load class period {Id}", Id);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if(addingStudent)
            await JSRuntime.InvokeVoidAsync("focusElement", "addStudentName");
    }

    async Task AddStudentButtonClicked()
    {
        addingStudent = true;
        student = new PosiTicks.Shared.Student();
        await InvokeAsync(StateHasChanged);
    }

    public void HandleValidSubmit() => TryAddStudent();

    async Task FinishButtonClicked()
    {
        if (!string.IsNullOrWhiteSpace(student.Name))
        {
            if (!TryAddStudent())
                return;
        }

        addingStudent = false;

        try
        {
            var response = await Http.PutAsJsonAsync<PosiTicks.Shared.ClassPeriod>($"ClassPeriod/{Id}", vm);

            // TODO: handle server saying duplicate students
            if (!response.IsSuccessStatusCode)
                throw new HttpRequestException($"Update failed. Status Code: {response.StatusCode}");
        }
        catch (Exception ex)
        {
            updateFailedUnexpectedly = true;
            Log.ForContext<ClassPeriodDetails>().Error("Client: Updating Class Period {Id} failed. Error: {@Error}", Id, ex.Message);
        }
    }

    private bool TryAddStudent()
    {
        customValidator.ClearErrors();
        var errors = new Dictionary<string, IEnumerable<string>>();

        try
        {
            vm.AddStudent(student.Name);
        }
        catch (PosiTicks.Shared.DuplicateStudentException ex)
        {
            errors.Add(nameof(student.Name), new List<string> { ex.Message });
            customValidator.DisplayErrors(errors);
            return false;
        }

        Log.ForContext<ClassPeriodDetails>().Information("Client: Adding Student {@Student} to Class Period {Id} at {RequestTime}", student, Id, DateTime.UtcNow);
        student = new PosiTicks.Shared.Student();
        return true;
    }
}
