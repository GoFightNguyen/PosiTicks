@page "/classperiod"
@page "/classperiod/{id:int}"
@using Serilog
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Id == 0)
{
    <h1>Add Class Period</h1>
    <EditForm Model="@vm" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="name" @bind-Value="vm.Name" />
        <button type="submit">Submit</button>
    </EditForm>
}
else if (loadFailed)
{
    <p><em>Sorry, the class period could not be loaded due to an error</em></p>
}
else if (vm == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@vm.Name</h1>
}


@code {
    private bool loadFailed;

    [Parameter]
    public int Id { get; set; }

    private PosiTicks.Shared.ClassPeriod vm;

    protected override async Task OnInitializedAsync()
    {
        if (Id == 0)
        {
            Log.ForContext<ClassPeriod>().Information("Client: Initializing ClassPeriod for creation at {RequestTime}", DateTime.UtcNow);
            vm = new PosiTicks.Shared.ClassPeriod();
        }
        else
        {
            Log.ForContext<ClassPeriod>().Information("Client: Initializing ClassPeriod for {Id} at {RequestTime}", Id, DateTime.UtcNow);

            try
            {
                loadFailed = false;
                vm = await Http.GetFromJsonAsync<PosiTicks.Shared.ClassPeriod>($"ClassPeriod/{Id}");
            }
            catch (Exception ex)
            {
                loadFailed = true;
                Log.ForContext<Index>().Warning(ex, "Client: Failed to load class periods");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        Log.ForContext<ClassPeriod>().Information("Client: Creating {@ClassPeriod} at {RequestTime}", vm, DateTime.UtcNow);
        var z = await Http.PostAsJsonAsync<PosiTicks.Shared.ClassPeriod>("ClassPeriod", vm);
        vm = await z.Content.ReadFromJsonAsync<PosiTicks.Shared.ClassPeriod>();
        NavigationManager.NavigateTo($"classperiod/{vm.Id}");
    }
}